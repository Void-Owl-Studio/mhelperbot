import asyncio
import json
import logging
import os
import re
import uuid
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ---
# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_DUMMY_TOKEN_HERE' –Ω–∞ —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather.
BOT_TOKEN = "YOUR_DUMMY_TOKEN_HERE"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ ---
AUTHORIZED_USERS_FILE = "authorized_users.json"
ADMINS_FILE = "admins.json"
CONFIG_FILE = "config.json"
# –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–π Telegram ID. –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
# –ó–∞–º–µ–Ω–∏—Ç–µ 1234567890 –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID.
SUPER_ADMIN_ID = 1234567890

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–æ–≤
pending_reports = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
def load_authorized_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(AUTHORIZED_USERS_FILE):
        try:
            with open(AUTHORIZED_USERS_FILE, "r") as f:
                return set(json.load(f))
        except (IOError, json.JSONDecodeError):
            logging.error("Failed to load authorized users file. Starting with an empty list.")
    return set()

def save_authorized_users(user_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(AUTHORIZED_USERS_FILE, "w") as f:
            json.dump(list(user_ids), f)
    except IOError:
        logging.error("Failed to save authorized users file.")

def load_admins():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, "r") as f:
                return set(json.load(f))
        except (IOError, json.JSONDecodeError):
            logging.error("Failed to load admins file. Starting with an empty list.")
    return set()

def save_admins(admin_ids):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(ADMINS_FILE, "w") as f:
            json.dump(list(admin_ids), f)
    except IOError:
        logging.error("Failed to save admins file.")

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r") as f:
                return json.load(f)
        except (IOError, json.JSONDecodeError):
            logging.error("Failed to load config file. Starting with default settings.")
    return {}

def save_config(config_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ JSON-—Ñ–∞–π–ª."""
    try:
        with open(CONFIG_FILE, "w") as f:
            json.dump(config_data, f, indent=4)
    except IOError:
        logging.error("Failed to save config file.")

def get_dispatcher_chat_id():
    """–ü–æ–ª—É—á–∞–µ—Ç ID —á–∞—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    config = load_config()
    return config.get("dispatcher_chat_id")

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    admins = load_admins()
    return str(user_id) == str(SUPER_ADMIN_ID) or str(user_id) in admins

def is_authorized(user_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –º–µ—Ö–∞–Ω–∏–∫–æ–≤ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    authorized_users = load_authorized_users()
    admins = load_admins()
    return str(user_id) in authorized_users or str(user_id) in admins or str(user_id) == str(SUPER_ADMIN_ID)


# --- –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ–º—ã—Ö —Ä–∞–±–æ—Ç, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
REPAIR_CATEGORIES = {
    "üõ†Ô∏è –ß–∞—Å—Ç—ã–π —Ä–µ–º–æ–Ω—Ç": [
        "üõû –ü–µ—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ", "ü©π –ö–∞–º–µ—Ä–∞", "‚öôÔ∏è –ú–æ—Ç–æ—Ä –∫–æ–ª–µ—Å–æ", "‚öôÔ∏è –ó–≤–µ–∑–¥–∞ –∑–∞–¥–Ω—è—è",
        "‚öôÔ∏è –ü–µ—Ä–µ–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫", "üõë –ö–æ–ª–æ–¥–∫–∏ (–∑–∞–¥–Ω–∏–µ)", "üõë –ö–æ–ª–æ–¥–∫–∏ (–ø–µ—Ä–µ–¥–Ω–∏–µ)",
        "üîó –¢–æ—Ä–º–æ–∑–Ω–æ–π —Ç—Ä–æ—Å (–∑–∞–¥–Ω–∏–π)", "üîó –¢–æ—Ä–º–æ–∑–Ω–æ–π —Ç—Ä–æ—Å (–ø–µ—Ä–µ–¥)", "ü™û –ó–µ—Ä–∫–∞–ª–æ (–ª)",
        "ü™û –ó–µ—Ä–∫–∞–ª–æ (–ø)", "üíß –§–ª—è–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å", "üì± –î–î–¢", "üìé –ó–∞–∂–∏–º –±–∞–≥–∞–∂–Ω–∏–∫–∞",
    ],
    "‚öôÔ∏è –ö–æ–ª—ë—Å–∞ –∏ —Ç–æ—Ä–º–æ–∑–∞": [
        "üîó –¢–æ—Ä–º–æ–∑–Ω–æ–π —Ç—Ä–æ—Å (–∑–∞–¥–Ω–∏–π)", "üîó –¢–æ—Ä–º–æ–∑–Ω–æ–π —Ç—Ä–æ—Å (–ø–µ—Ä–µ–¥)", "üõû –ü–µ—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–µ—Å–æ",
        "‚ö°Ô∏è –ú–æ—Ç–æ—Ä –∫–æ–ª–µ—Å–æ", "üõë –ö–æ–ª–æ–¥–∫–∏ (–ø–µ—Ä–µ–¥–Ω–∏–µ)", "üõë –ö–æ–ª–æ–¥–∫–∏ (–∑–∞–¥–Ω–∏–µ)",
        "üíø –ü–µ—Ä–µ–¥–Ω–∏–π –¥–∏—Å–∫", "ü•Å –ë–∞—Ä–∞–±–∞–Ω –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –∫–æ–ª–µ—Å–∞", "‚öôÔ∏è –ü–µ—Ä–µ–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫",
        "‚öôÔ∏è –ó–∞–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫", "‚öôÔ∏è –ó–≤–µ–∑–¥–∞ –∑–∞–¥–Ω—è—è", "ü©π –ö–∞–º–µ—Ä–∞", "üö≤ –ü–æ–∫—Ä—ã—à–∫–∞",
    ],
    "‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–∏–∫–∞": [
        "üí® –ö—É—Ä–æ–∫ –≥–∞–∑–∞", "üñ•Ô∏è –î–∏—Å–ø–ª–µ–π", "üéõÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä", "üîí –ó–∞–º–æ–∫ –ê–ö–ë",
        "üîå USB –ø–æ—Ä—Ç", "üí° –§–∞—Ä–∞", "‚û°Ô∏è –ü–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ (–ø)", "‚¨ÖÔ∏è –ü–æ–≤–æ—Ä–æ—Ç–Ω–∏–∫ (–ª)",
        "üîã —è—á–µ–π–∫–∞ 2 –∞–∫–±", "üîå –ü—Ä–æ–≤–æ–¥–∫–∞", "üîî –ó—É–º–º–µ—Ä", "üîå –†–æ–∑–µ—Ç–∫–∞",
        "‚ö°Ô∏è –ö–∞–±–µ–ª—å –¥–ª—è –∑–∞—Ä—è–¥–∫–∏", "üî¥ –ó–∞–¥–Ω—è—è —Ñ–∞—Ä–∞", "üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–∞—è –ø–ª–∞—Å—Ç–∏–Ω–∞ –∑–∞–¥–Ω–µ–≥–æ —Ñ–æ–Ω–∞—Ä—è",
    ],
    "üö≤ –†–∞–º–∞ –∏ –Ω–∞–≤–µ—Å–Ω–æ–µ": [
        "üì± –î–î–¢", "üìé –ó–∞–∂–∏–º –±–∞–≥–∞–∂–Ω–∏–∫–∞", "üíß –§–ª—è–≥–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å", "ü™û –ó–µ—Ä–∫–∞–ª–æ (–ø)",
        "ü™û –ó–µ—Ä–∫–∞–ª–æ (–ª)", "ü¶µ –ü–æ–¥–Ω–æ–∂–∫–∞", "üõ°Ô∏è –ö—Ä—ã–ª–æ –ø–µ—Ä–µ–¥–Ω–µ–µ", "üõ°Ô∏è –ö—Ä—ã–ª–æ –∑–∞–¥–Ω–µ–µ",
        "üÜî –ù–æ–º–µ—Ä–Ω–æ–π –∑–Ω–∞–∫", "ü¶∂ –ü–æ–¥—Å—Ç–∞–≤–∫–∞ –¥–ª—è –Ω–æ–≥ (–ø)", "ü¶∂ –ü–æ–¥—Å—Ç–∞–≤–∫–∞ –¥–ª—è –Ω–æ–≥ (–ª)",
        "üîí –ó–∞–º–æ–∫ —Å–µ–¥–ª–∞", "ü™ë –°–∏–¥–µ–Ω–∏–µ", "üõ°Ô∏è –ö–æ–∂—É—Ö —Ü–µ–ø–∏", "üß≥ –ó–∞–¥–Ω–∏–π –±–∞–≥–∞–∂–Ω–∏–∫",
        "üí° –ö—Ä—ã—à–∫–∞ —Ñ–∞—Ä—ã", "üì¢ –†–µ–∫–ª–∞–º–Ω–Ω—ã–π –±–∞–Ω–µ—Ä (–ø)", "üì¢ –†–µ–∫–ª–∞–º–Ω—ã–π –±–∞–Ω–µ—Ä (–ª)",
        "üß≥ –ü–µ—Ä–µ–¥–Ω–∏–π –±–∞–≥–∞–∂–Ω–∏–∫", "üîã –ù–∞–ø—Ä–∞–≤–ª—è—é—â–∞—è –¥–ª—è –∞–∫–∫–∞–º—É–ª—è—Ç–æ—Ä–∞",
        "üîã –í–µ—Ä—Ö–Ω—è—è –∫—Ä—ã—à–∫–∞ –æ—Ç—Å–µ–∫–∞ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞", "üîã –î–µ—Ä–∂–∞—Ç–µ–ª—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–ø–ª–æ—â–∞–¥–∫–∞)",
        "üõπ –î–µ–∫–∞", "üîí –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å–∫–æ–±–∞ –∑–∞–º–∫–∞ —Å–∏–¥–µ–Ω–∏—è", "ü§ñ –ó–∞–¥–Ω—è—è –∫—Ä—ã—à–∫–∞ IoT",
        "ü§ñ –ü–ª–∞—Å—Ç–∏–Ω–∞ –±–æ–∫–æ–≤–∞—è –¥–µ—Ä–∂–∞—Ç–µ–ª—å IoT", "üí° –°–≤–µ—Ç–æ–æ—Ç—Ä–∞–∂–∞—Ç–ª—å IoT", "‚öìÔ∏è –Ø–∫–æ—Ä—å",
        "üîí –ö—Ä—ã—à–∫–∞ –∑–∞–º–∫–∞ —Å–∏–¥–µ–Ω–∏—è", "üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è –æ—Ç –∑–∞–∫—Ä—É—á–∏–≤–∞–Ω–∏—è",
        "‚õìÔ∏è –ù–∞—Ç—è–∂–∏—Ç–µ–ª—å —Ü–µ–ø–∏", "üß≥ –ó–∞–¥–Ω—è—è –ø–æ–ª–∫–∞ –±–∞–≥–∞–∂–Ω–∏–∫–∞",
    ],
    "‚õìÔ∏è –¢—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è –∏ –ø–æ–¥—à–∏–ø–Ω–∏–∫–∏": [
        "‚öôÔ∏è –ó–≤–µ–∑–¥–∞ –∑–∞–¥–Ω—è—è", "ü¶∂ –ü–µ–¥–∞–ª—å (–ª)", "ü¶∂ –ü–µ–¥–∞–ª—å (–ø)", "‚õìÔ∏è –¶–µ–ø—å",
        "üîß –ó–∞–º–µ–Ω–∞ —à–∞—Ç—É–Ω–∞", "üîí –ó–∞–º–æ–∫ —Ü–µ–ø–∏", "‚öôÔ∏è –ö–∞—Ä–µ—Ç–∫–∞", "‚öôÔ∏è –ü–µ—Ä–µ–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫",
        "‚öôÔ∏è –ó–∞–¥–Ω–∏–π –ø–æ–¥—à–∏–ø–Ω–∏–∫", "‚öôÔ∏è –ü–æ–¥—à–∏–ø–Ω–∏–∫ –≤–∏–ª–∫–∏ —Ä—É–ª—è",
    ],
    "üéõÔ∏è –†—É–ª–µ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": [
        "üç¥ –í–∏–ª–∫–∞", "‚úã –†—É—á–∫–∞ —Ç–æ—Ä–º–æ–∑–∞ (–õ)", "‚úã –†—É—á–∫–∞ —Ç–æ—Ä–º–æ–∑–∞ (–ü)",
        "‚öôÔ∏è –°—Ç–∞–∫–∞–Ω –≤–∏–ª–∫–∏ —Ä—É–ª—è", "üïπÔ∏è –†—É–ª—å", "üõ°Ô∏è –í–µ—Ä—Ö–Ω—è—è –Ω–∞–∫–ª–∞–¥–∫–∞ –Ω–∞ —Ä—É–ª—å",
        "üõ°Ô∏è –ù–∏–∂–Ω—è—è –Ω–∞–∫–ª–∞–¥–∫–∞ –Ω–∞ —Ä—É–ª—å", "ü§ö –ì—Ä–∏–ø—Å–∞ (–ø)", "ü§ö –ì—Ä–∏–ø—Å–∞ (–ª)",
        "üï≥Ô∏è –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –≥—Ä–∏–ø—Å—É", "üìé –•–æ–º—É—Ç —Ä—É–ª—è", "‚öôÔ∏è –ß–∞—à–∫–∞ –Ω–µ—Å—É—â–∞—è –≤–∏–ª–∫–∏",
        "üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º",
    ],
    "üîß –ü—Ä–æ—á–µ–µ": [
        "ü©π –ó–∞–ø–ª–∞—Ç–∫–∞", "üì∂ SIM", "üîå –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø—Ä–æ—Å—Ç–∞–≤–∫–∞ –ë–ü (–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è)",
        "üîå –ü–ª–∞—Å—Ç–∏–∫–æ–≤—ã–µ –ø—Ä–æ—Å—Ç–∞–≤–∫–∞ –ë–ü (–ù–∞—Ä—É–∂–Ω–∞—è)",
    ]
}

# –°–ø–∏—Å–æ–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ —Å–ø–∏—Å–∫–∏ —Ä–µ–º–æ–Ω—Ç–Ω—ã—Ö —Ç–æ—á–µ–∫
LOCATIONS = ["–ü—Ä–∏–º–µ—Ä1", "–ü—Ä–∏–º–µ—Ä2"]

# –°–æ–∑–¥–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π –∏ –ø–æ–ª–Ω—ã—Ö –∏–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_CALLBACKS = {f"cat_{i+1}": name for i, name in enumerate(REPAIR_CATEGORIES.keys())}
REVERSE_CATEGORY_CALLBACKS = {name: key for key, name in CATEGORY_CALLBACKS.items()}

# –°–æ–∑–¥–∞—ë–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã
WORK_CALLBACKS = {}
REVERSE_WORK_CALLBACKS = {}
for category_name, works_list in REPAIR_CATEGORIES.items():
    for work_name in works_list:
        work_key = str(uuid.uuid4())[:8]
        WORK_CALLBACKS[work_name] = work_key
        REVERSE_WORK_CALLBACKS[work_key] = work_name


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine) ---
class Form(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –æ—Ç—á—ë—Ç–∞."""
    get_bike_id = State()
    get_repair_type = State()
    get_location = State()
    select_category = State()
    select_works = State()
    confirm = State()
    get_custom_work = State()

class AdminForm(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏."""
    menu = State()
    add_user = State()
    remove_user = State()
    add_admin = State()
    remove_admin = State()
    set_dispatcher_id = State()

# –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π.
router = Router()

# --- –§—É–Ω–∫—Ü–∏–∏-–ø–æ–º–æ—â–Ω–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def get_repair_type_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üö¥‚Äç‚ôÇÔ∏è –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–º–æ–Ω—Ç", callback_data="type_–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–º–æ–Ω—Ç"),
        types.InlineKeyboardButton(text="üì¶ –ù–∞ –≤—ã–¥–∞—á—É", callback_data="type_–ù–∞ –≤—ã–¥–∞—á—É")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()

def get_locations_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π."""
    builder = InlineKeyboardBuilder()
    for loc in LOCATIONS:
        builder.add(types.InlineKeyboardButton(text=loc, callback_data=f"loc_{loc}"))
    builder.adjust(2)
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()

def get_categories_keyboard():
    builder = InlineKeyboardBuilder()
    for key, name in CATEGORY_CALLBACKS.items():
        builder.add(types.InlineKeyboardButton(text=name, callback_data=f"category_{key}"))
    builder.adjust(2)
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return builder.as_markup()

def get_category_works_keyboard(category: str, selected_works: list):
    builder = InlineKeyboardBuilder()
    works_list = REPAIR_CATEGORIES.get(category, [])
    for work in works_list:
        button_text = f"‚úÖ {work}" if work in selected_works else work
        work_key = WORK_CALLBACKS.get(work)
        if work_key:
            builder.add(types.InlineKeyboardButton(text=button_text, callback_data=f"work_{work_key}"))

    builder.adjust(2)
    builder.row(
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="add_custom")
    )
    return builder.as_markup()

def get_final_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="final_confirm"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="restart")
    )
    return builder.as_markup()

def get_start_over_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É", callback_data="restart")
    )
    return builder.as_markup()

def get_dispatcher_keyboard(report_key: str):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{report_key}"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{report_key}")
    )
    return builder.as_markup()

def get_admin_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞", callback_data="admin_add_mechanic"),
        types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∫–∞", callback_data="admin_remove_mechanic")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_admin"),
        types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_remove_admin")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –º–µ—Ö–∞–Ω–∏–∫–æ–≤", callback_data="admin_list_mechanics"),
        types.InlineKeyboardButton(text="üìù –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_list_admins")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å ID —á–∞—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", callback_data="admin_set_dispatcher_id")
    )
    builder.row(
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –í—ã–π—Ç–∏", callback_data="admin_exit")
    )
    builder.adjust(2, 2, 2, 1, 1)
    return builder.as_markup()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥.
    """
    await state.clear()
    if not is_authorized(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã –º–µ—Ö–∞–Ω–∏–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ (ID):",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ).as_markup(),
    )
    await state.set_state(Form.get_bike_id)


@router.message(Command("myid"))
async def cmd_myid(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myid.
    –í—ã–≤–æ–¥–∏—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode.MARKDOWN_V2 –∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ID
    await message.answer(f"–¢–≤–æ–π Telegram ID: `{user_id}`", parse_mode=ParseMode.MARKDOWN_V2)


@router.message(Form.get_bike_id, F.text)
async def process_bike_id(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if not is_authorized(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    bike_id = message.text.upper()
    pattern = r"^[A-Z]{2}\d{3}[A-Z]$"
    
    if re.fullmatch(pattern, bike_id):
        await state.update_data(bike_id=bike_id)
        await message.answer(
            f"–ù–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞: {bike_id}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞:",
            reply_markup=get_repair_type_keyboard(),
        )
        await state.set_state(Form.get_repair_type)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: AB123C",
            reply_markup=InlineKeyboardBuilder().row(
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ).as_markup(),
        )
        await state.set_state(Form.get_bike_id)


@router.callback_query(Form.get_repair_type, F.data.startswith("type_"))
async def process_repair_type(callback_query: types.CallbackQuery, state: FSMContext):
    repair_type = callback_query.data.split("_")[1]
    await state.update_data(repair_type=repair_type, selected_works=[])
    await callback_query.message.edit_text(
        f"–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: {repair_type}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=get_locations_keyboard(),
    )
    await callback_query.answer()
    await state.set_state(Form.get_location) # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏


@router.callback_query(Form.get_location, F.data.startswith("loc_"))
async def process_location_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏."""
    location = callback_query.data.split("_", 1)[1]
    await state.update_data(location=location)

    user_data = await state.get_data()
    repair_type = user_data.get("repair_type")
    
    await callback_query.message.edit_text(
        f"–õ–æ–∫–∞—Ü–∏—è: {location}\n–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: {repair_type}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_keyboard(),
    )
    await callback_query.answer()
    await state.set_state(Form.select_category)


@router.callback_query(Form.select_category, F.data.startswith("category_"))
async def process_category_selection(callback_query: types.CallbackQuery, state: FSMContext):
    category_key = callback_query.data.split("_", 1)[1]
    category = CATEGORY_CALLBACKS.get(category_key)
    
    if not category:
        await callback_query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return
        
    user_data = await state.get_data()
    selected_works = user_data.get("selected_works", [])
    
    await state.update_data(current_category=category)
    
    await callback_query.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_category_works_keyboard(category, selected_works),
    )
    await callback_query.answer()
    await state.set_state(Form.select_works)


@router.callback_query(Form.select_works, F.data.startswith("work_"))
async def process_works_selection(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_category = user_data.get("current_category")
    selected_works = user_data.get("selected_works", [])
    
    work_key = callback_query.data.split("_", 1)[1]
    work_name = REVERSE_WORK_CALLBACKS.get(work_key)

    if not work_name:
        await callback_query.answer("–†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return

    if work_name in selected_works:
        selected_works.remove(work_name)
    else:
        selected_works.append(work_name)

    await state.update_data(selected_works=selected_works)
    await callback_query.message.edit_reply_markup(reply_markup=get_category_works_keyboard(current_category, selected_works))
    await callback_query.answer()


@router.callback_query(Form.select_works, F.data == "back_to_categories")
async def back_to_categories(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    repair_type = user_data.get("repair_type")
    
    await callback_query.message.edit_text(
        f"–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: {repair_type}\n\n–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_categories_keyboard(),
    )
    await callback_query.answer()
    await state.set_state(Form.select_category)


@router.callback_query(Form.select_works, F.data == "add_custom")
async def add_custom_work_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ.",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_custom_add")
        ).as_markup(),
    )
    await callback_query.answer()
    await state.set_state(Form.get_custom_work)


@router.message(Form.get_custom_work, F.text)
async def process_custom_work(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_works = user_data.get("selected_works", [])
    custom_work = message.text
    selected_works.append(custom_work)
    await state.update_data(selected_works=selected_works)
    await message.answer(
        f"–†–∞–±–æ—Ç–∞ '{custom_work}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏ –æ—Ç—á—ë—Ç:",
        reply_markup=get_categories_keyboard(),
    )
    await state.set_state(Form.select_category)


@router.callback_query(Form.get_custom_work, F.data == "cancel_custom_add")
async def cancel_custom_add(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_category = user_data.get("current_category")
    selected_works = user_data.get("selected_works", [])
    
    await callback_query.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {current_category}\n–í—ã–±–µ—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_category_works_keyboard(current_category, selected_works)
    )
    await callback_query.answer()
    await state.set_state(Form.select_works)


@router.callback_query(F.data == "confirm", StateFilter(Form.select_works, Form.select_category))
async def confirm_works(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    bike_id = user_data["bike_id"]
    repair_type = user_data["repair_type"]
    selected_works = user_data["selected_works"]
    location = user_data["location"]

    if not selected_works:
        await callback_query.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É.", show_alert=True)
        return

    works_list = "\n- ".join(selected_works)
    summary = (
        f"–°–≤–æ–¥–∫–∞ –ø–æ —Ä–µ–º–æ–Ω—Ç—É\n\n"
        f"–í–µ–ª–æ—Å–∏–ø–µ–¥ ‚Ññ {bike_id}\n"
        f"–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: {repair_type}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:\n- {works_list}\n"
    )

    await callback_query.message.edit_text(
        summary,
        reply_markup=get_final_confirmation_keyboard(),
    )
    await callback_query.answer()
    await state.set_state(Form.confirm)


def format_telegram_link(user: types.User) -> str:
    if user.username:
        return f"@{user.username}"
    else:
        return f"[{user.first_name}](tg://user?id={user.id})"

def remove_emojis_and_strip(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–º–æ–¥–∑–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    """
    emoji_pattern = re.compile(
        "["
        "\U00002600-\U000027BF"  # Unicode range for dingbats and symbols
        "\U0001F600-\U0001F64F"  # Emoticons
        "\U0001F300-\U0001F5FF"  # Transport & Map Symbols
        "\U0001F680-\U0001F6FF"  # Miscellaneous Symbols and Pictographs
        "\U0001F700-\U0001F77F"  # Geometric Shapes Extended
        "\U0001F780-\U0001F7FF"  # Alchemical Symbols
        "\U0001F800-\U0001F8FF"  # Supplemental Arrows-C
        "\U0001F900-\U0001F9FF"  # Supplemental Symbols and Pictographs
        "\U0001FA00-\U0001FA6F"  # Chess Symbols
        "\U0001FA70-\U0001FAFF"  # Symbols and Pictographs Extended-A
        "\U00002702-\U000027B0"  # Dingbats
        "\U000024C2-\U0001F251"  # Enclosed symbols
        "\U00002B50"             # White medium star
        "\U0001F1E6-\U0001F1FF"  # Regional Indicator Symbols
        "]+",
        flags=re.UNICODE,
    )
    return emoji_pattern.sub("", text).strip()


@router.callback_query(Form.confirm, F.data == "final_confirm")
async def send_report(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    dispatcher_chat_id = get_dispatcher_chat_id()
    if not dispatcher_chat_id:
        await callback_query.message.edit_text(
            "‚ùå ID —á–∞—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /admin."
        )
        await state.clear()
        return

    user_data = await state.get_data()
    bike_id = user_data["bike_id"]
    repair_type = user_data["repair_type"]
    selected_works = user_data["selected_works"]
    location = user_data["location"]
    mechanic = callback_query.from_user

    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–∞–±–æ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
    dispatcher_works = [remove_emojis_and_strip(work) for work in selected_works]
    works_list = "; ".join(dispatcher_works)
    
    report_message = (
        f"–í–µ–ª–æ—Å–∏–ø–µ–¥ ‚Ññ {bike_id}\n"
        f"–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞: {repair_type}\n"
        f"–õ–æ–∫–∞—Ü–∏—è: {location}\n"
        f"–°—Ç–∞—Ç—É—Å: –≥–æ—Ç–æ–≤\n"
        f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã: {works_list}\n"
        f"ID –º–µ—Ö–∞–Ω–∏–∫–∞: {format_telegram_link(mechanic)}"
    )

    report_key = str(uuid.uuid4())[:8]
    pending_reports[report_key] = {
        "bike_id": bike_id,
        "mechanic_id": mechanic.id
    }

    try:
        await bot.send_message(
            chat_id=dispatcher_chat_id,
            text=report_message,
            reply_markup=get_dispatcher_keyboard(report_key)
        )
        await callback_query.message.edit_text(
            "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞–º. –û–Ω–∏ —Å–∫–æ—Ä–æ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç.",
            reply_markup=get_start_over_keyboard(),
        )
    except Exception as e:
        await callback_query.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}.",
            reply_markup=get_start_over_keyboard(),
        )
        if report_key in pending_reports:
            del pending_reports[report_key]
    finally:
        await state.clear()
        await callback_query.answer()


@router.callback_query(F.data.startswith("accept_"))
async def accept_report(callback_query: types.CallbackQuery, bot: Bot):
    try:
        report_key = callback_query.data.split("_", 1)[1]
        report_data = pending_reports.get(report_key)
        
        if not report_data:
            await callback_query.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç—á—ë—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
            return

        mechanic_id = report_data["mechanic_id"]
        bike_id = report_data["bike_id"]

    except Exception:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return
        
    await callback_query.message.edit_text(
        f"{callback_query.message.text}\n\n‚úÖ –û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º {callback_query.from_user.first_name}.",
    )
    
    try:
        await bot.send_message(
            chat_id=mechanic_id,
            text=f"üéâ –û—Ç—á—ë—Ç –æ —Ä–µ–º–æ–Ω—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ ‚Ññ{bike_id} –ø—Ä–∏–Ω—è—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.",
        )
    except Exception as e:
        logging.error(f"Failed to send notification to mechanic {mechanic_id}: {e}")
    
    if report_key in pending_reports:
        del pending_reports[report_key]
        
    await callback_query.answer("–û—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –ú–µ—Ö–∞–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.")


@router.callback_query(F.data.startswith("decline_"))
async def decline_report(callback_query: types.CallbackQuery, bot: Bot):
    try:
        report_key = callback_query.data.split("_", 1)[1]
        report_data = pending_reports.get(report_key)
        
        if not report_data:
            await callback_query.answer("–î–∞–Ω–Ω—ã–µ –ø–æ –æ—Ç—á—ë—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
            return

        mechanic_id = report_data["mechanic_id"]
        bike_id = report_data["bike_id"]
        
    except Exception:
        await callback_query.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        return
    
    await callback_query.message.edit_text(
        f"{callback_query.message.text}\n\n‚ùå –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º {callback_query.from_user.first_name}.",
    )
    
    try:
        await bot.send_message(
            chat_id=mechanic_id,
            text=f"üòû –û—Ç—á—ë—Ç –æ —Ä–µ–º–æ–Ω—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ ‚Ññ{bike_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á—ë—Ç.",
        )
    except Exception as e:
        logging.error(f"Failed to send notification to mechanic {mechanic_id}: {e}")
    
    if report_key in pending_reports:
        del pending_reports[report_key]
        
    await callback_query.answer("–û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ú–µ—Ö–∞–Ω–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω.")


@router.callback_query(F.data == "restart")
async def restart_form(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ñ–æ—Ä–º—ã.
    """
    user_id = callback_query.from_user.id
    if not is_authorized(user_id):
        await callback_query.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã –º–µ—Ö–∞–Ω–∏–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        await state.clear()
        return

    await state.clear()
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞ (ID):",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ).as_markup(),
    )
    await state.set_state(Form.get_bike_id)
    await callback_query.answer()

@router.callback_query(StateFilter("*"), F.data == "cancel")
async def cancel_form(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@router.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await state.set_state(AdminForm.menu)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_menu_keyboard())


@router.callback_query(AdminForm.menu, F.data == "admin_add_mechanic")
async def admin_add_mechanic_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞."""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞ (—ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID, –µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot)."
    )
    await state.set_state(AdminForm.add_user)
    await callback_query.answer()


@router.message(AdminForm.add_user, F.text)
async def admin_add_mechanic_process(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫."""
    user_id_to_add = message.text.strip()
    if not user_id_to_add.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
        
    authorized_users = load_authorized_users()
    if user_id_to_add in authorized_users:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
    else:
        authorized_users.add(user_id_to_add)
        save_authorized_users(authorized_users)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_add} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    
    await state.set_state(AdminForm.menu)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())


@router.callback_query(AdminForm.menu, F.data == "admin_add_admin")
async def admin_add_admin_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )
    await state.set_state(AdminForm.add_admin)
    await callback_query.answer()


@router.message(AdminForm.add_admin, F.text)
async def admin_add_admin_process(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫."""
    admin_id_to_add = message.text.strip()
    if not admin_id_to_add.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
        
    admins = load_admins()
    if admin_id_to_add in admins:
        await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        admins.add(admin_id_to_add)
        save_admins(admins)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id_to_add} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    
    await state.set_state(AdminForm.menu)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())


@router.callback_query(AdminForm.menu, F.data == "admin_list_mechanics")
async def admin_list_mechanics(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–æ–≤."""
    authorized_users = load_authorized_users()
    
    if not authorized_users:
        message_text = "–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∫–æ–≤."
    else:
        user_list = "\n".join(authorized_users)
        message_text = f"**–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏:**\n\n{user_list}"
    
    await callback_query.message.edit_text(
        message_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")
        ).as_markup()
    )
    await callback_query.answer()


@router.callback_query(AdminForm.menu, F.data == "admin_list_admins")
async def admin_list_admins(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
    admins = load_admins()
    
    if not admins:
        message_text = "–í —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
    else:
        user_list = "\n".join(admins)
        message_text = f"**–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n\n{user_list}"
    
    await callback_query.message.edit_text(
        message_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardBuilder().row(
            types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_back_to_menu")
        ).as_markup()
    )
    await callback_query.answer()


@router.callback_query(AdminForm.menu, F.data == "admin_remove_mechanic")
async def admin_remove_mechanic_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –º–µ—Ö–∞–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –º–µ—Ö–∞–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
    )
    await state.set_state(AdminForm.remove_user)
    await callback_query.answer()


@router.message(AdminForm.remove_user, F.text)
async def admin_remove_mechanic_process(message: types.Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö."""
    user_id_to_remove = message.text.strip()
    if not user_id_to_remove.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
        
    authorized_users = load_authorized_users()
    if user_id_to_remove in authorized_users:
        authorized_users.remove(user_id_to_remove)
        save_authorized_users(authorized_users)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–æ–≤.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –º–µ—Ö–∞–Ω–∏–∫–æ–≤.")
    
    await state.set_state(AdminForm.menu)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())


@router.callback_query(AdminForm.menu, F.data == "admin_remove_admin")
async def admin_remove_admin_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
    )
    await state.set_state(AdminForm.remove_admin)
    await callback_query.answer()


@router.message(AdminForm.remove_admin, F.text)
async def admin_remove_admin_process(message: types.Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    admin_id_to_remove = message.text.strip()
    if not admin_id_to_remove.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
        
    if str(message.from_user.id) == str(SUPER_ADMIN_ID):
        if admin_id_to_remove == str(SUPER_ADMIN_ID):
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            admins = load_admins()
            if admin_id_to_remove in admins:
                admins.remove(admin_id_to_remove)
                save_admins(admins)
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_id_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
    
    await state.set_state(AdminForm.menu)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())


@router.callback_query(AdminForm.menu, F.data == "admin_set_dispatcher_id")
async def admin_set_dispatcher_id_prompt(callback_query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ID —á–∞—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    await callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á—ë—Ç—ã. –≠—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —É @userinfobot –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–≥–æ."
    )
    await state.set_state(AdminForm.set_dispatcher_id)
    await callback_query.answer()


@router.message(AdminForm.set_dispatcher_id, F.text)
async def admin_set_dispatcher_id_process(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —á–∞—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    dispatcher_id = message.text.strip()
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∏—Å–ª–æ, ID —á–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
    if not re.match(r"^-?\d+$", dispatcher_id):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    config = load_config()
    config["dispatcher_chat_id"] = int(dispatcher_id)
    save_config(config)
    
    await message.answer(f"ID —á–∞—Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ({dispatcher_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.set_state(AdminForm.menu)
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())


@router.callback_query(F.data == "admin_back_to_menu")
async def admin_back_to_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await state.set_state(AdminForm.menu)
    await callback_query.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu_keyboard())
    await callback_query.answer()


@router.callback_query(AdminForm.menu, F.data == "admin_exit")
async def admin_exit(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    await state.clear()
    await callback_query.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
    await callback_query.answer()

def print_ascii_art():
    ascii_art = r'''
        __  _________________  _____    _   ____________   __  __________    ____  __________ 
       /  |/  / ____/ ____/ / / /   |  / | / /  _/ ____/  / / / / ____/ /   / __ \/ ____/ __ \
      / /|_/ / __/ / /   / /_/ / /| | /  |/ // // /      / /_/ / __/ / /   / /_/ / __/ / /_/ /
     / /  / / /___/ /___/ __  / ___ |/ /|  // // /___   / __  / /___/ /___/ ____/ /___/ _, _/ 
    /_/  /_/_____/\____/_/ /_/_/  |_/_/ |_/___/\____/  /_/ /_/_____/_____/_/   /_____/_/ |_|  

    # Copyright (c) 2025 Void-Owl-Studio. –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ MIT.
    # AlexaMerens
    '''
    print(ascii_art)

# –û–Ω –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–ª.
@router.callback_query()
async def unhandled_callback_query(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –∫–Ω–æ–ø–æ–∫.
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏ —Å–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π.
    """
    await callback_query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", show_alert=True)
    await callback_query.message.edit_reply_markup(reply_markup=None)

# –ê —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–∏ –æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.
@router.message(F.text)
async def unhandled_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start.")
    await state.clear()

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    print_ascii_art()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(AUTHORIZED_USERS_FILE):
        with open(AUTHORIZED_USERS_FILE, "w") as f:
            json.dump([], f)
    if not os.path.exists(ADMINS_FILE):
        with open(ADMINS_FILE, "w") as f:
            json.dump([], f)
    if not os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "w") as f:
            json.dump({}, f)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=None))
    dp = Dispatcher()
    dp.include_router(router)
    
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
